fib: addi	$sp,  $sp, -12		# make room on stack
	 sw		$ra,  8($sp)		# push $ra
	 sw		$s0,  4($sp)		# push $s0
	 sw		$a0,  0($sp)		# push $a0 (n)
	 bgt	$a0,  $0, test2	    # if n > 0, test if n == 1
	 add	$v0,  $0, $0		# else return 0
	 j rtn
test2: addi $t0,  $0, 1
	   bne $t0, $a0, gen # if n > 1, go to gen
	   addi $v0, $0, 1 # else return 1
	   j rtn
gen: subi	$a0, $a0, 1			# $a0 = n - 1
     jal fib # call fib(n - 1)
	 add $s0, $v0, $0 # copy fib(n - 1) => $s0
	 subi $a0, $a0, 1 # $a0 = n - 2
	 jal fib
	 add $v0, $v0, $s0 # $v0 = fib(n - 2) + fib(n - 1)
rtn: lw $a0, 0($sp) # pop $a0
     lw $s0, 4($sp) # pop $s0
	 lw $ra, 8($sp) # pop $ra
	 addi $sp, $sp, 12 # restore $sp
	 jr $ra # come back to caller
	 
	 
	 
	 

